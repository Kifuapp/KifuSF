// MARK: SwitchlessCases

// ## Available annoations:
// //   sourcery: case_skip
// case uid
//
// //   sourcery: case_name = "url"
// case imageUrl

{% for type in types.implementing.SwitchlessCases|enum %}
extension {{ type.name }} {
{% if type.hasAssociatedValues %}
    enum Errors: Error {
        case invokedMethodWithWrongCase
    }
{% endif %}

{% for case in type.cases|!annotated:"case_skip" %}
    {% if case|annotated:"case_name" %}
    var {{ case.annotations.case_name }}: Bool {
    {% else %}
    var is{{ case.name|upperFirstLetter }}: Bool {
    {% endif %}
        switch self {
        case .{{ case.name }}:
            return true
        default:
            return false
        }
    }

    {% if case.hasAssociatedValue %}
        {% if case.associatedValues.count > 1 %}
    func {{ case.name }}() throws -> ({% for assValue in case.associatedValues %}{{ assValue.typeName }}{% if not forloop.last %}, {% endif %}{% endfor %}) {
        {% else %}
    func {{ case.name }}() throws -> {% for assValue in case.associatedValues %}{{ assValue.typeName }}{% endfor %} {
        {% endif %}
        switch self {
        case .{{ case.name }}(let value):
            return value
        default:
            throw Errors.invokedMethodWithWrongCase
        }
    }

    {% endif %}
{% endfor %}
}
{% endfor %}
